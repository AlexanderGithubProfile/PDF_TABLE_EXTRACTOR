import os
import logging
from typing import List, Union, Any
from utils_img_processing import extract_image_text
from utils_data_extract import extract_table_of_contents, check_pdf_pages
from utils_img_table_detection import image_loader, image_processing, is_table, show_image

# PIPELINE_START
#######################################################################
def main(self: Any, logger: logging.Logger) -> None:
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤–≤–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    input_dir = 'INPUT_pdf_to_scan'
    output_dir = 'OUTPUT_tables'
    output_img_dir = '00_IMG_output'

    # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É –≤–≤–æ–¥–∞
    for pdf_file in os.listdir(input_dir):
        pdf_path=os.path.join(input_dir, pdf_file)

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ PDF –≤ –∫–∞—Ç–∞–ª–æ–≥–µ OUTPUT_tables
        output_dir = os.path.join(output_dir, os.path.splitext(pdf_file)[0])
        os.makedirs(output_dir, exist_ok=True)

        logger.info("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏–∑ PDF")
        toc: List[Union[str, int]] = extract_table_of_contents(fr'{pdf_path}') # –ò—â–µ–º –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º ‚Ññ —Å—Ç—Ä. –∏ –∏–º—è –¥–ª—è –Ω–∞–∑–≤. —Ç–∞–±–ª. csv
        image_based: List[int] = check_pdf_pages(self, pdf_path, toc, output_dir, logger) # –ò–∑–≤–ª–µ—á. text-based –∏ –æ—Ç–¥–µ–ª. image-based —Å—Ç—Ä. –≤ —Å–ø–∏—Å–æ–∫

        # –û–ø—Ä–µ–¥–µ–ª–∏–º –Ω–∞ –∫–∞–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö —Ç–∞–±–ª–∏—Ü—ã
        image_list = []
        if len(image_based) > 0:
            logger.info(f'–í —Å—Ç—Ä. {", ".join(map(lambda x: str(x + 1), image_based))} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ')
            for page_num in image_based:
                img = image_loader(page_num, pdf_path) # –∑–∞–≥—Ä—É–∑—á–∏–∫
                right_indent=image_processing(img) # –Ω–∞—Ö–æ–¥–∏–º –æ—Ç—Å—Ç—É–ø—ã –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                result = is_table(right_indent, page_num, logger) # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                image_list.append(page_num) if result else None
                show_image(img, result, output_dir, page_num) # –Ω–∞–¥–ø–∏—Å—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã

                self.progressbar_image.set((page_num + 1) / len(image_based))
                self.progressbar_image.update()


        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ PDF –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ ..')
        for page in image_list:
            extract_image_text(pdf_path, page, output_dir, output_img_dir, logger)
        logger.info('Done !üëç')
        os.remove(pdf_path)


if __name__ == "__main__":
    main()